const express = require('express')
const knex = require('../../conf/knex.config')
const authRouter = express.Router();
const tokenService = require("../../services/tokenService")
const CustomErrors = require("../../errors/errors")
const uuid = require("uuid")
const bcrypt = require("bcrypt")

authRouter.post(
    '/registration',
    async (req, res, next) => {
        try {
            const users = await knex
                .select('identity')
                .from('users')

            const hasDuplicates = await users.some(function (currentObject) {
                const identity = currentObject.identity.toLowerCase() === req.body.identity;
                return identity;
            });

            if (hasDuplicates) {
                throw CustomErrors.BadRequest(`Пользователь уже зарегестрирован`)
            }
            const hashPassword = await bcrypt.hash(req.body.password, 3)
            const uid = uuid.v4();

            await knex('users').insert(
                {
                    uid,
                    identity: req.body.identity,
                    password: hashPassword,
                }
            )

            const currentUser = await knex
                .select('identity', 'uid')
                .from('users')
                .where('identity', req.body.identity)

            const tokens = tokenService.generateTokens({...currentUser[0]})
            await tokenService.saveToken(currentUser[0].uid, tokens.refreshToken)

            res.send("Новый пользователь успешно зарегистрирован")
        } catch (e) {
            next(e)
        }
    })

authRouter.post('/login', async (req, res, next) => {
    try {
        const userArray = await knex
            .select('*')
            .from('users')
            .where('identity', req.body.identity)

        if (!userArray[0]) {
            throw CustomErrors.BadRequest('Пользователь с такой эл. почтой не найден')
        }

        const isPassEquals = await bcrypt.compare(req.body.password, userArray[0].password)
        if (!isPassEquals) {
            throw CustomErrors.BadRequest('Неверный пароль')
        }

        const user = userArray[0]
        const tokens = tokenService.generateTokens({...user})
        await tokenService.saveToken(user.uid, tokens.refreshToken)

        res.cookie('refreshToken', tokens.refreshToken, {maxAge: 30 * 24 * 60 * 60 * 1000, httpOnly: true})
        res.send({...tokens, user: user})
    } catch (e) {
        next(e)
    }
})

authRouter.get('/refresh', async (req, res, next) => {
    try {
        const {refreshToken} = req.cookies;

        if (!refreshToken) {
            throw CustomErrors.UnauthorizedError()
        }

        const userData = tokenService.validateRefreshToken(refreshToken);
        const tokenFromDB = await tokenService.findToken(refreshToken);

        if (!userData || !tokenFromDB) {
            throw CustomErrors.UnauthorizedError()
        }

        const userArray = await knex
            .select('*')
            .from('users')
            .where('uid', userData.uid)

        const user = userArray[0]
        const tokens = tokenService.generateTokens({...user})
        await tokenService.saveToken(user.uid, tokens.refreshToken)

        res.cookie('refreshToken', tokens.refreshToken, {maxAge: 30 * 24 * 60 * 60 * 1000, httpOnly: true})
        res.send({...tokens, user: user})
    } catch (e) {
        next(e)
    }
})

authRouter.post('/logout', async (req, res, next) => {
    try {
        const {refreshToken} = req.cookies;
        await tokenService.removeToken(refreshToken)
        res.clearCookie('refreshToken');
        return res.send('Логаут успешен')
    } catch (e) {
        next(e)
    }
})

module.exports = authRouter
import axios from "axios";
import {API_URL, cryptoKey, localStorageKeyAuth} from "../constants";
import * as CryptoJS from "crypto-js"

// Конфиг для axios
const $api = axios.create({
    withCredentials: true,
    baseURL: API_URL
})

// Обработчик исходящих запросов, указываем тип информации и добавляем токен в заголовки
$api.interceptors.request.use((config) => {
    config.headers.Authorization = `Bearer ${localStorage.getItem(localStorageKeyAuth)}`
    config.headers["Content-Type"] = `application/json`
    // Зашифровываем данные на клиенте
    if (config.data) {
        const ciphertext = encodeURIComponent(CryptoJS.AES.encrypt(JSON.stringify(config.data), cryptoKey).toString())
        config.data = {value: ciphertext}
    }
    return config;
})

// Обработчик приходящих запросов
$api.interceptors.response.use((config) => {
    // Расшифровываем при получении
    const bytes = CryptoJS.AES.decrypt(decodeURIComponent(config.data), cryptoKey)
    const data = JSON.parse(bytes.toString(CryptoJS.enc.Utf8))
    config.data = data.value
    return config
}, (config) => {
    // Расшифровываем при получении
    const errData = config.response.data
    const bytes = CryptoJS.AES.decrypt(decodeURIComponent(errData), cryptoKey)
    const data = JSON.parse(bytes.toString(CryptoJS.enc.Utf8))
    config.response.data = data.value
    return Promise.reject(config)
})

export default $api
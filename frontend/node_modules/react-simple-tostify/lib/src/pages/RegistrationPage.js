import {ErrorMessage, Field, Form, Formik} from "formik";
import {useCallback, useId, useState} from "react";
import * as Yup from "yup"
import {AuthService} from "../services/AuthService";

const RegistrationPage = () => {
    const [error, setError] = useState(undefined)

    const identityFieldId = useId()
    const passwordFieldId = useId()

    const authApi = new AuthService()

    const handleSubmit = useCallback(async ({identity, password}) => {
        try {
            await authApi.registration(identity, password)
            if (error) setError(undefined)
        } catch (e) {
            console.log(e)
            setError(e.response.data.message)
        }
    }, [error])

    return <div>
        <Formik
            initialValues={{
                identity: "",
                password: ""
            }}
            validationSchema={Yup.object({
                identity: Yup.string().required("Обязательное поле!"),
                password: Yup.string().required("Обязательное поле!").min(6, "Минимальное количество символов 6")
            })}
            onSubmit={async (values) => {
                await handleSubmit(values)
            }}>
            {({dirty, isValid, isSubmitting}) => <Form>
                <h1>Зарегистрироваться</h1>
                <div>
                    <div>
                        <label htmlFor={identityFieldId}>
                            Логин
                        </label>
                    </div>
                    <div>
                        <Field id={identityFieldId} placeholder={"yruzik"} type={"text"} name={"identity"}/>
                    </div>
                    <div>
                        <ErrorMessage name={"identity"}/>
                    </div>
                </div>
                <div>
                    <div>
                        <label htmlFor={passwordFieldId}>
                            Пароль
                        </label>
                    </div>
                    <div>
                        <Field id={passwordFieldId} placeholder={"123123"} type={"password"} name={"password"}/>
                    </div>
                    <div>
                        <ErrorMessage name={"password"}/>
                    </div>
                </div>
                {error && <div>{error}</div>}
                <button disabled={isSubmitting || !isValid || !dirty} type={"submit"}>Зарегистрироваться</button>
            </Form>}
        </Formik>
    </div>
}

export default RegistrationPage